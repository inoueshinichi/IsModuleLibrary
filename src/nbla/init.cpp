// 本来, NBLAのInit.cppはジェネレータプログラムにより自動で生成される
// ここでは、手動で記述している

// *WARNING*
// THIS FILE IS AUTO-GENERATED BY CODE GENERATOR.
// PLEASE DO NOT EDIT THIS FILE BY HAND!
// If you want to modify this file, edit following files.
// - src/nbla/init.cpp.tmpl
// - build-tools/code_generator/generate.py


#include "nbla/cpu.hpp"
#include "nbla/array_registry.hpp"
// #include "nbla/utils/dlpack_array_registry.hpp"
#include "nbla/array/cpu_array.hpp"
// #include "nbla/array/cpu_dlpack_array.hpp"
#include "nbla/function_registry.hpp"
#include "nbla/backend_registry.hpp"

//% for name, snake_name, _ in function_list :
//% if name in function_types :
//#include <nbla/function/${snake_name}.hpp>
//% endif
//% endfor
//% for name, snake_name, _ in solver_list :
//% if name in solver_types :
//#include <nbla/solver/${snake_name}.hpp>
//% endif
//% endfor

#include "nbla/function/abs.hpp"


namespace Is
{
    namespace nbla
    {
        void init_cpu()
        {
            static volatile bool is_initialized = false; // 初回だけfalseに初期化
            if (is_initialized)
                return;
            
            // No branch after this, hence, we should put it here to prevent re-enter.
            is_initialized = true;

            /* Backend系クラスの登録 */ 
            NBLA_REGISTER_BACKEND("cpu", []() { return SingletonManager::get<Cpu>(); });

            /* Array系クラスの登録 */
            // CpuArray, CpuCachedArray
			NBLA_REGISTER_ARRAY_CREATOR(CpuArray);
			SingletonManager::get<Cpu>()->register_array_class("CpuArray");
			NBLA_REGISTER_ARRAY_CREATOR(CpuCachedArray);
			SingletonManager::get<Cpu>()->register_array_class("CpuCachedArray");
			NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuArray, CpuCachedArray, synchronizer_default);
			NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuCachedArray, CpuArray, synchronizer_default);
            // CpuDlpackArray
			//NBLA_REGISTER_ARRAY_CREATOR(CpuDlpackArray);
			//SingletonManager::get<Cpu>()->register_array_class("CpuDlpackArray");
			//NBLA_REGISTER_DLPACK_DEVICE_TYPE_TO_CONTEXT(kDLCPU, cpu, CpuDlpackArray);
			//NBLA_REGISTER_ARRAY_TO_DLPACK_DEVICE_TYPE(CpuArray, kDLCPU);
			//NBLA_REGISTER_ARRAY_TO_DLPACK_DEVICE_TYPE(CpuCachedArray, kDLCPU);
			//// It is not necessary that DlpackArray is converted from other arrays.
			//NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuDlpackArray, CpuArray, synchronizer_default);
			//NBLA_REGISTER_ARRAY_SYNCHRONIZER(CpuDlpackArray, CpuCachedArray, synchronizer_default);

            /* Array Groupに(Array系クラス, バックエンド系)の組を登録 */
            NBLA_REGISTER_ARRAY_GROUP(CpuArray, cpu);
            NBLA_REGISTER_ARRAY_GROUP(CpuCachedArray, cpu);
            // NBLA_REGISTER_ARRAY_GROUP(CpuDlpackArray, cpu);

            /* Universal Function系クラスの登録 */
            // % for name, _, arg_types in function_list:
            // % for type_config, ttypes in function_types.get(name, {}).items():
            //     <%
            //     ttype_args = ', '.join(ttypes)
            //     ttype_symbol = ''.join(map(lambda x: x.replace(' ', ''), ttypes))
            //     function_sym = '{}<{}>'.format(name, ttype_args)
            //     function_typed_sym = '{}_{}'.format(name, ttype_symbol)
            //     %> 
            // using ${function_typed_sym} = ${function_sym};
            // NBLA_REGISTER_FUNCTION_IMPL(${name}, ${function_typed_sym}, "cpu:${type_config}"${''.join(map(lambda x: ', ' + x, arg_types))});
            // % endfor
            // % endfor
            
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<bool>, "cpu:bool");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<unsigned char>, "cpu:ubyte");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<char>, "cpu:byte");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<unsigned short>, "cpu:ushort");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<short>, "cpu:short");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<unsigned int>, "cpu:uint");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<int>, "cpu:int");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<unsigned long>, "cpu:ulong");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<long>, "cpu:long");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<unsigned long long>, "cpu:ulonglong");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<long long>, "cpu:longlong");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<float>, "cpu:float");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<double>, "cpu:double");
            // NBLA_REGISTER_FUNCTION_IMPL(Abs, Abs<long double>, "cpu:longdouble");
           

            /* Solver系クラスの登録 */
            // % for name, _, arg_types in solver_list:
            // % for type_config, ttypes in solver_types.get(name, {}).items():
            //     <%
            //     ttype_args = ', '.join(ttypes)
            //     ttype_symbol = ''.join(map(lambda x: x.replace(' ', ''), ttypes))
            //     solver_sym = '{}<{}>'.format(name, ttype_args)
            //     solver_typed_sym = '{}_{}'.format(name, ttype_symbol)
            //     %> 
            // using ${solver_typed_sym} = ${solver_sym};
            // NBLA_REGISTER_SOLVER_IMPL(${name}, ${solver_typed_sym}, "cpu:${type_config}"${''.join(map(lambda x: ', ' + x, arg_types))});
            // %endfor  
            // % endfor
        }


        void clear_cpu_memory_cache()
        {
            SingletonManager::get<Cpu>()->caching_allocator()->free_unused_caches();
        }


        void print_cpu_memory_cache_map()
        {
            SingletonManager::get<Cpu>()->caching_allocator()->print_memory_cache_map();
        }


        vector<string> cpu_array_classes() 
        {
            return SingletonManager::get<Cpu>()->array_classes();
        }


        void _cpu_set_array_classes(const vector<string> &a) 
        {
            SingletonManager::get<Cpu>()->_set_array_classes(a);
        }


        void cpu_device_synchronize(const string& device)
        {
            // nothing
        }


        int cpu_get_device_count()
        {
            return 1;
        }


        vector<string> cpu_get_devices()
        {
            return {"0"};
        }
    }
}
